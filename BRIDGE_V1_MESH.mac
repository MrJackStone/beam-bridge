! BRIDGE_V1_MESH

!!                                                                                                !!
!! 4.1 SUPERSTRUCTURE MESH                                                                        !!
!!                                                                                                !!
! Mesh deck slabs
CMSEL,S,COMPA_Slab
AATT,MAT_Slab,,TYPE_SHELL181,CS_global,SEC_SLAB_num
AESIZE,ALL,FEM_ElementSize
AMESH,ALL

! Selection components: slab elements by span
*do,nthSpan,1,GEO_supportCount-1,1
  *if,GEO_deckRadius,eq,0,then
    ! Straight deck:
    x_i=GEO_supportX(nthSpan)
    x_j=GEO_supportX(nthSpan+1)
    cmsel,s,COMPA_Slab
    asel,r,loc,x,x_i,x_j
  *else
    ! Curved deck:
    csys,CY_deck
    chi_i=GEO_supportChi(nthSpan)
    chi_j=GEO_supportChi(nthSpan+1)
    cmsel,s,COMPA_Slab
    asel,r,loc,y,180-chi_i,180-chi_j
    csys,0
  *endif

  esla,s
  nsle,s,active
  ecmName=strcat('COMPE_SLAB_',chrval(nthSpan))
  ncmName=strcat('COMPN_SLAB_',chrval(nthSpan))
  cm,%ecmName%,elem
  cm,%ncmName%,node
*enddo

! Create girders
BRIDGE_V1_FEMGIRDERS

ESEL,S,TYPE,,TYPE_BEAM188
CM,COMPE_Girder,ELEM
NSLE,S,ACTIVE
CM,COMPN_Girder,NODE

! Create cross-beams (between girders)
BRIDGE_V1_FEMCROSSBEAM
esel,s,type,,TYPE_BEAM188
nsle,s
cmsel,u,COMPN_Girder
cmsel,u,COMPE_Girder
cm,COMPN_crossBeam,node
cm,COMPE_crossBeam,elem

! Create gerber cantilever beams and consoles
*if,GEO_gerberStatus,eq,1,then
  cmsel,s,COMPL_Gerber
  orient,TYPE_BEAM188,MAT_Gerber,SEC_Gerber,0,0,1
  lmesh,all
  cmsel,s,COMPL_Console
  orient,TYPE_BEAM188,MAT_Gerber,SEC_Console,0,0,1,FEM_ElementSize
  lmesh,all

  cmsel,s,COMPK_GerberTip
  nslk,s
  cm,COMPN_GerberTip,node

  cmsel,s,COMPK_GerberSupported
  lslk,s,1
  esll,s
  nsle,s,active
  cm,COMPN_GerberSupported,node

  cmsel,s,COMPK_Console
  nslk,s
  cm,COMPN_Console,node

  ! Couple all DOFs: gerber tip and console
  cmsel,s,COMPN_GerberTip
  cmsel,a,COMPN_Console
  cpintf,all
*endif


! Create components:

! Girder elements & nodes

! Girder support nodes
CMSEL,S,COMPK_GirderSupport
*get,KCount,KP,,COUNT
KPNum=0
nsel,none
CM,COMPN_GirderSupport,NODE
*do,nthKP,1,KCount,1
  KPNum=KPNEXT(KPNum)
  xVal=KX(KPNum)
  yVal=KY(KPNum)
  zVal=KZ(KPNum)
  NSEL,S,LOC,X,xVal
  NSEL,R,LOC,Y,yVal
  NSEL,R,LOC,Z,zVal
  CMSEL,A,COMPN_GirderSupport
  CM,COMPN_GirderSupport,NODE
*enddo
CMSEL,R,COMPN_Girder
CM,COMPN_GirderSupport,NODE

! Slab elements
CMSEL,S,COMPA_Slab
ESLA,S
ESEL,R,TYPE,,TYPE_SHELL181
CM,COMPE_Slab,ELEM

! Slab nodes
CMSEL,S,COMPE_Slab
NSLE,S,ACTIVE
CM,COMPN_Slab,NODE

! Girders by span
*do,nthSpan,1,GEO_SupportCount-1,1
  nsel,none
  esel,none
  *do,nthGirder,1,GEO_girderCount,1
    ecmName_nthGirder=strcat('COMPE_S',strcat(chrval(nthSpan),strcat('_G',chrval(nthGirder))))
    ncmName_nthGirder=strcat('COMPN_S',strcat(chrval(nthSpan),strcat('_G',chrval(nthGirder))))
    cmsel,a,%ncmName_nthGirder%
    cmsel,a,%ecmName_nthGirder%
  *enddo
  ecmName=strcat('COMPE_GIRDERS_S',chrval(nthSpan))
  ncmName=strcat('COMPN_GIRDERS_S',chrval(nthSpan))
  cm,%ecmName%,elem
  cm,%ncmName%,node
*enddo

! Load train path
cmsel,s,COMPL_LoadTrain
nsll,s,1
cm,COMPN_LoadTrain,node



!!                                                                                                !!
!! 4.2 MESOSTRUCTURE MESH                                                                         !!
!!                                                                                                !!
nsel , none
esel , none
cm   , COMPE_FrameGirder , elem
cm   , COMPN_FrameGirder , node
cm   , COMPE_Column      , elem
cm   , COMPE_Column      , node
cm   , COMPN_colCap      , node
cm   , COMPE_colCap      , elem
cm   , COMPE_ColTube     , elem
cm   , COMPN_ColTube     , node
cm   , COMPE_Submerged   , elem

*if,GEO_pierCount,gt,0,then

  ! Draw mesostructure
  *do,nthSupport,1,GEO_supportCount,1
    BRIDGE_V1_FEMMESO, nthSupport
  *enddo

  ! Selection components: submerged and exposed column elements
  cmsel,s,COMPE_Column
  cmsel,a,COMPE_ColTube
  cm,COMPE_temp,elem
  *if,GEO_waterHeight,GT,0,THEN
    NSEL,S,LOC,Z,zFrameBot,zFrameBot+GEO_waterHeight
    ESLN,r,1
    CM,COMPE_Submerged,ELEM
  *else
    esel,none
    CM,COMPE_Submerged,ELEM
  *endif
  cmsel,s,COMPE_temp
  CMSEL,U,COMPE_Submerged
  CM,COMPE_Exposed,ELEM

*endif



!!                                                                                                !!
!! 4.3 ABUTMENTS                                                                                  !!
!!                                                                                                !!
! Create CSYS to use as local element coordinate systems
csys,CS_ABT1
csnext,'ESYS_ABT1_tw'
clocal,ESYS_ABT1_tw,cart,0,0,0,90,90  ! TODO  csys

csys,CS_ABT2
csnext,'ESYS_ABT2_tw'
clocal,ESYS_ABT2_tw,cart,0,0,0,90,90  ! TODO  csys

csys,CS_ABT1_lw
csnext,'ESYS_ABT1_lw'
clocal,ESYS_ABT1_lw,cart,0,0,0,90,90  ! TODO  csys

csys,CS_ABT1_lw
csnext,'ESYS_ABT1_lc'
clocal,ESYS_ABT1_lc,cart,0,0,0,90  ! TODO  csys

csys,CS_ABT1_rw
csnext,'ESYS_ABT1_rw'
clocal,ESYS_ABT1_rw,cart,0,0,0,-90,90  ! TODO  csys

csys,CS_ABT1_rw
csnext,'ESYS_ABT1_rc'
clocal,ESYS_ABT1_rc,cart,0,0,0,90,180  ! TODO  csys

csys,CS_ABT2_lw
csnext,'ESYS_ABT2_lw'
clocal,ESYS_ABT2_lw,cart,0,0,0,90,90  ! TODO  csys

csys,CS_ABT2_lw
csnext,'ESYS_ABT2_lc'
clocal,ESYS_ABT2_lc,cart,0,0,0,90  ! TODO  csys

csys,CS_ABT2_rw
csnext,'ESYS_ABT2_rw'
clocal,ESYS_ABT2_rw,cart,0,0,0,-90,90  ! TODO  csys

csys,CS_ABT2_rw
csnext,'ESYS_ABT2_rc'
clocal,ESYS_ABT2_rc,cart,0,0,0,90,180  ! TODO  csys

csys,0

!! 4.3.1 SHELL ELEMENTS                                                                           !!
!!                                                                                                !!
! Transversal walls
cmsel,s,COMPA_ABT_tranWall
cmsel,u,COMPA_ABT_thinTranWall
cmsel,r,COMPA_ABT_1
aatt,MAT_Abutment,,TYPE_SHELL181,ESYS_ABT1_tw,SEC_ABT_tranWall

cmsel,s,COMPA_ABT_thinTranWall
cmsel,r,COMPA_ABT_1
aatt,MAT_Abutment,,TYPE_SHELL181,ESYS_ABT1_tw,SEC_ABT_thinTranWall

cmsel,s,COMPA_ABT_tranWall
cmsel,u,COMPA_ABT_thinTranWall
cmsel,r,COMPA_ABT_2
aatt,MAT_Abutment,,TYPE_SHELL181,ESYS_ABT2_tw,SEC_ABT_tranWall

cmsel,s,COMPA_ABT_thinTranWall
cmsel,r,COMPA_ABT_2
aatt,MAT_Abutment,,TYPE_SHELL181,ESYS_ABT2_tw,SEC_ABT_thinTranWall

! Longitudinal walls
cmsel,s,COMPA_ABT_longWalls
cmsel,r,COMPA_ABT_1
cmsel,r,COMPA_ABT_leftSide
aatt,MAT_Abutment,,TYPE_SHELL181,ESYS_ABT1_lw,SEC_ABT_longWall

cmsel,s,COMPA_ABT_longWalls
cmsel,r,COMPA_ABT_1
cmsel,r,COMPA_ABT_rightSide
aatt,MAT_Abutment,,TYPE_SHELL181,ESYS_ABT1_rw,SEC_ABT_longWall

cmsel,s,COMPA_ABT_longWalls
cmsel,r,COMPA_ABT_2
cmsel,r,COMPA_ABT_leftSide
aatt,MAT_Abutment,,TYPE_SHELL181,ESYS_ABT2_lw,SEC_ABT_longWall

cmsel,s,COMPA_ABT_longWalls
cmsel,r,COMPA_ABT_2
cmsel,r,COMPA_ABT_rightSide
aatt,MAT_Abutment,,TYPE_SHELL181,ESYS_ABT2_rw,SEC_ABT_longWall

! Columns
cmsel,s,COMPA_ABT_columns
aatt,MAT_Abutment,,TYPE_SHELL181,,SEC_ABT_column

! Wings
cmsel,s,COMPA_ABT_wings
cmsel,r,COMPA_ABT_1
cmsel,r,COMPA_ABT_leftSide
aatt,MAT_Abutment,,TYPE_SHELL181,ESYS_ABT1_lw,SEC_ABT_wing

cmsel,s,COMPA_ABT_wings
cmsel,r,COMPA_ABT_1
cmsel,r,COMPA_ABT_rightSide
aatt,MAT_Abutment,,TYPE_SHELL181,ESYS_ABT1_rw,SEC_ABT_wing

cmsel,s,COMPA_ABT_wings
cmsel,r,COMPA_ABT_2
cmsel,r,COMPA_ABT_leftSide
aatt,MAT_Abutment,,TYPE_SHELL181,ESYS_ABT2_lw,SEC_ABT_wing

cmsel,s,COMPA_ABT_wings
cmsel,r,COMPA_ABT_2
cmsel,r,COMPA_ABT_rightSide
aatt,MAT_Abutment,,TYPE_SHELL181,ESYS_ABT2_rw,SEC_ABT_wing

! Beams
cmsel,s,COMPA_ABT_beam
aatt,MAT_Abutment,,TYPE_SHELL181,,SEC_ABT_beam

! Pile caps
cmsel,s,COMPA_ABT_pileCap
aatt,MAT_Abutment,,TYPE_SHELL181,,SEC_ABT_pileCap

cmsel,s,COMPA_ABT_pileCap
cmsel,r,COMPA_ABT_1
cmsel,r,COMPA_ABT_leftSide
aatt,MAT_Abutment,,TYPE_SHELL181,ESYS_ABT1_lc,SEC_ABT_pileCap

cmsel,s,COMPA_ABT_pileCap
cmsel,r,COMPA_ABT_1
cmsel,r,COMPA_ABT_rightSide
aatt,MAT_Abutment,,TYPE_SHELL181,ESYS_ABT1_rc,SEC_ABT_pileCap

cmsel,s,COMPA_ABT_pileCap
cmsel,r,COMPA_ABT_2
cmsel,r,COMPA_ABT_leftSide
aatt,MAT_Abutment,,TYPE_SHELL181,ESYS_ABT2_lc,SEC_ABT_pileCap

cmsel,s,COMPA_ABT_pileCap
cmsel,r,COMPA_ABT_2
cmsel,r,COMPA_ABT_rightSide
aatt,MAT_Abutment,,TYPE_SHELL181,ESYS_ABT2_rc,SEC_ABT_pileCap

! Approach slabs
cmsel,s,COMPA_ABT_appSlab
aatt,MAT_Approach,,TYPE_SHELL181,,SEC_ABT_appSlab

! Overhangs
cmsel,s,COMPA_ABT_overhangs
aatt,MAT_Abutment,,TYPE_SHELL181,,SEC_ABT_appSlab

! Mesh areas
cmsel,s,COMPA_Abutment
aesize,all,FEM_ABT_esize

esel,none
nsel,none
cmsel,s,COMPA_ABT_1
*get,ac,area,,count
*if,ac,gt,0,then
  amesh,all
*endif
cm,COMPE_ABT_1,elem
cm,COMPN_ABT_1,node
csys,CS_ABT1
local,csyiqr(0,14)+1,cart,0,0,0,-90-GEO_supportChi_0,0,0  ! TODO  csys
csys,0

esel,none
nsel,none
cmsel,s,COMPA_ABT_2
*get,ac,area,,count
*if,ac,gt,0,then
  amesh,all
*endif
cm,COMPE_ABT_2,elem
cm,COMPN_ABT_2,node
csys,CS_ABT2
csys,0

! Selection components: submerged and exposed elements
*if,GEO_waterHeight,gt,0,then
  cmsel,s,COMPE_ABT_1
  nsel,s,loc,z,zFrameBot,GEO_waterHeight-GEO_ABT1_height
  esln,r
  cmpadd,'COMPE_Submerged'

  cmsel,s,COMPE_ABT_2
  nsel,s,loc,z,zFrameBot,GEO_waterHeight-GEO_ABT2_height
  esln,r
  cmpadd,'COMPE_Submerged'
*endif
cmsel,s,COMPE_ABT_1
cmsel,a,COMPE_ABT_2
cmsel,u,COMPE_Submerged
cmpadd,'COMPE_Exposed'

! Selection components: nodes without soil support
cmsel,s,COMPA_ABT_pileInterface
nsla,s,1
cm,COMPN_ABT_pileInterface,node


!! 4.3.2 POSTS                                                                                    !!
!!                                                                                                !!
csys,CS_ABT1
cmsel,s,COMPL_ABT_posts
cmsel,r,COMPL_ABT_1
*get,lc,line,,count
*if,lc,gt,0,then
  orient,TYPE_BEAM188,MAT_abutment,SEC_ABT_girderPost,1,,,,10 ! TODO  remove hardcoded mesh size
  lmesh,all
*endif

csys,CS_ABT2
cmsel,s,COMPL_ABT_posts
cmsel,r,COMPL_ABT_2
*get,lc,line,,count
*if,lc,gt,0,then
  orient,TYPE_BEAM188,MAT_abutment,SEC_ABT_girderPost,1,,,,10 ! TODO  remove hardcoded mesh size
  lmesh,all
*endif


!! 4.3.3 NODAL COUPLINGS                                                                          !!
!!                                                                                                !!
! Nodal selection component: nodes at wall-slab-bridge interface
csys,CS_ABT1
nsel,s,loc,x,0
csys,CS_ABT2
nsel,a,loc,x,0
csys,0
cm,COMPN_temp,node
nsel,s,loc,z,GEO_ABT1_zAB
nsel,a,loc,z,GEO_ABT2_zAB
cmsel,r,COMPN_temp
cm,COMPN_ABT_wsbInterface,node

! Connect approach slab to transversal wall
cmsel,s,COMPA_ABT_tranWall
cmsel,a,COMPA_ABT_appSlab
lsla,s
nsla,s,1
cmsel,r,COMPN_ABT_wsbInterface
cpintf,UX
cpintf,UY
cpintf,UZ

! Nodal selection component: girder supports at abutments
cmsel,s,COMPN_ABT_wsbInterface
cmsel,s,COMPA_ABT_tranWall
lsla,s
nsla,r,1
cm,COMPN_tranWall,node

nsel,none
*do,nthGirder,1,GEO_girderCount,1
  nthCS=CS_girders(nthGirder)
  csys,nthCS
  nsel,a,loc,y,0
  csys,0
*enddo
cm,COMPN_temp,node
cmsel,s,COMPN_ABT_1
cmsel,a,COMPN_ABT_2
cmsel,r,COMPN_temp
cmsel,r,COMPN_tranWall
cm,COMPN_ABT_girder,node

! Connect girder posts to pile cap
*if,GEO_ABT1_status,eq,1,and,GEO_ABT1_type,eq,5,then
  BRIDGE_V1_FEMJOINPOSTS , 1
*endif

*if,GEO_ABT2_status,eq,1,and,GEO_ABT2_type,eq,5,then
  BRIDGE_V1_FEMJOINPOSTS , 2
*endif


!! 4.3.4 SOIL SPRING SUPPORTS                                                                     !!
!!                                                                                                !!
*if,GEO_ABT1_status,eq,1,then
  csys,CS_ABT1
  cmsel,s,COMPN_ABT_1
  cmsel,u,COMPN_ABT_pileInterface
  cmsel,s,COMPA_ABT_pileCap
  nsla,u,1
  BRIDGE_V1_ABTSPRSUP, 1 , GEO_deckWidth_beg, GEO_ABT1_type, CS_ABT1, CS_ABT1_trv, CS_ABT1_lw, CS_ABT1_rw, GEO_ABT1_beamOpt
*endif

*if,GEO_ABT2_status,eq,1,then
  csys,CS_ABT2
  cmsel,s,COMPN_ABT_2
  cmsel,u,COMPN_ABT_pileInterface
  cmsel,s,COMPA_ABT_pileCap
  nsla,u,1
  BRIDGE_V1_ABTSPRSUP, 2 , GEO_deckWidth_end, GEO_ABT2_type, CS_ABT2, CS_ABT2_trv, CS_ABT2_lw, CS_ABT2_rw, GEO_ABT2_beamOpt
*endif

csys,0


!! 4.3.5 COMPONENTS                                                                               !!
!!                                                                                                !!
! Approach slabs
cmsel,s,COMPA_ABT_appSlab
esla,s
nsle,s
cm,COMPE_ABT_appSlab,elem
cm,COMPN_ABT_appSlab,node

! Overhangs
cmsel,s,COMPA_ABT_overhangs
esla,s
nsle,s
cm,COMPE_ABT_overhangs,elem
cm,COMPN_ABT_overhangs,node

! Left footpath slab elements
cmsel,s,COMPA_ABT_LeftFootpath
esla,s
cm,COMPE_ABT_LeftFootpath,elem

! Right footpath slab elements
cmsel,s,COMPA_ABT_RightFootpath
esla,s
cm,COMPE_ABT_RightFootpath,elem

! Vehicle lane slab elements
cmsel,s,COMPA_ABT_Lanes
esla,s
cm,COMPE_ABT_Lanes,elem

! Barrier nodes (abutments)
nsel,none
cm,COMPN_ABT_Barrier,node
*if,GEO_ABT1_status,eq,1,or,GEO_ABT2_status,eq,1,then
  *if,GEO_ABT1_appSlab,eq,1,or,GEO_ABT2_appSlab,eq,1,then
    cmsel,s,COMPL_Barrier
    nsll,s,1
    cmsel,s,COMPA_ABT_appSlab
    lsla,s
    nsla,r,1
    cmpadd,'COMPN_ABT_Barrier'
  *endif
*endif

! Pile cap nodes
cmsel,s,COMPA_ABT_pileCap
nsla,s,1
cm,COMPN_ABT_pileCap,node

! Transversal wall nodes
cmsel,s,COMPA_ABT_tranWall
nsla,s,1
cm,COMPN_ABT_tranWall,node

! Girder posts
cmsel,s,COMPL_ABT_posts
esll,s
nsle,s,active
cm,COMPE_ABT_posts,elem
cm,COMPN_ABT_posts,node



!!                                                                                                !!
!! 4.4 CONNECT SUPERSTRUCTURE TO MESOSTRUCTURE/ABUTMENTS                                          !!
!!                                                                                                !!
BRIDGE_V1_GBEAR
!
!
!
!!                                                                                                !!
!! 4.5 SELECTION COMPONENTS FOR LOADING                                                           !!
!!                                                                                                !!
! Left footpath slab elements
CMSEL,S,COMPA_LeftFootpath
ESLA,S
ESEL,R,TYPE,,TYPE_SHELL181
CM,COMPE_LeftFootpath,ELEM

! Right footpath slab elements
CMSEL,S,COMPA_RightFootpath
ESLA,S
ESEL,R,TYPE,,TYPE_SHELL181
CM,COMPE_RightFootpath,ELEM

! Vehicle lane elements
cmsel,s,COMPA_Lanes
esla,s
esel,r,type,,TYPE_SHELL181
CM,COMPE_Lanes,ELEM

! Barrier nodes
*if,LOAD_barrierStatus,EQ,1,THEN
  CMSEL,S,COMPL_Barrier
  NSLL,S,1
  CMSEL,S,COMPE_Slab
  NSLE,R,ACTIVE
  CM,COMPN_Barrier,NODE
*else
  nsel,none
  CM,COMPN_Barrier,NODE
*endif
!
!
!
!!                                                                                                !!
!! 4.6 INFRASTRUCTURE MESH                                                                        !!
!!                                                                                                !!

!! 4.6.1 GRADE BEAM                                                                               !!
!!                                                                                                !!
*if,GEO_capOpt,eq,0,then
  ! Grade beam mesh
  esel,none
  nsel,none
  CMSEL,S,COMPL_GradeBeam
  *get,lc,line,,count
  *if,lc,gt,0,then
    ORIENT,TYPE_BEAM188,MAT_GradeBeam,SEC_GradeBeam_num,,,1,FEM_ElementSize
    LMESH,ALL
    NSLE,S,ACTIVE
  *endif
  CM,COMPE_GradeBeam,ELEM
  CM,COMPN_GradeBeam,NODE
*endif
!
!
!! 4.6.2 PILE CAPS                                                                                !!
!!                                                                                                !!
! Pile cap mesh
*if,GEO_pierCount,gt,0,then
  esel,none
  nsel,none
  cmsel,s,COMPA_PileCap
  !cmsel,a,COMPA_CenterPiles
  AATT,MAT_PileCap,,TYPE_SHELL181,CS_global,SEC_PILECAP_num
  AESIZE,ALL,FEM_PierESize
  *get,ac,area,,count
  *if,ac,gt,0,then
    AMESH,ALL
  *endif
  CM,COMPE_PileCap,ELEM
  CM,COMPN_PileCap,NODE
  *if,GEO_frameOpt,eq,3,then
    BRIDGE_V1_FEMHAMMERPCAP
  *endif
*else
  esel,none
  nsel,none
  CM,COMPE_PileCap,ELEM
  CM,COMPN_PileCap,NODE
*endif
!
!
!! 4.6.3 PILES                                                                                    !!
!!                                                                                                !!
! Pile mesh
esel,none
nsel,none

cmsel,s,COMPL_Pile
*get,lc,line,,count
*if,lc,gt,0,then
  orient,TYPE_BEAM188,MAT_Pile,SEC_PILE_num,1,,,FEM_PileELength
  lmesh,all
*endif

cmsel,s,COMPL_ABT_piles
*get,lc,line,,count
*if,lc,gt,0,then
  orient,TYPE_BEAM188,MAT_Pile,SEC_ABT_pile,1,,,FEM_PileELength
  lmesh,all
*endif

nsle,S,ACTIVE
CM,COMPE_Pile,ELEM
CM,COMPN_Pile,NODE
cmsel,s,COMPK_Support
cmsel,a,COMPK_ABT_pileBase
nslk,s
CM,COMPN_RockSupport,NODE

! Pile components
cmsel,s,COMPL_ABT_piles
cmsel,r,COMPL_ABT_1
esll,s
nsle,s,active
cm,COMPL_ABT1_piles,line
cm,COMPN_ABT1_piles,node
cm,COMPE_ABT1_piles,elem

cmsel,s,COMPL_ABT_piles
cmsel,r,COMPL_ABT_2
esll,s
nsle,s,active
cm,COMPL_ABT2_piles,line
cm,COMPN_ABT2_piles,node
cm,COMPE_ABT2_piles,elem

cmsel,s,COMPE_ABT1_piles
cmsel,a,COMPE_ABT2_piles
cmsel,s,COMPN_ABT1_piles
cmsel,a,COMPN_ABT2_piles
cm,COMPE_ABT_piles,elem
cm,COMPN_ABT_piles,node

cmsel,s,COMPL_pile
esll,s
nsle,s,active
cm,COMPN_PIER_piles,node
cm,COMPE_PIER_piles,elem

! TODO  the following approach to connect piles is, in general, quite bad -- revise

! Connect pier pile to pier pile cap with nodal couplings
cmsel,s,COMPK_PileTop
nslk,s
cm,COMPN_pileNodePool,node
*get,nc,node,,count
pileNode = 0

*do,nthNode,1,nc,1
  cmsel,s,COMPN_pileNodePool

  pileNode = ndnext(pileNode)
  xVal     = nx(pileNode)
  yVal     = ny(pileNode)
  zVal     = nz(pileNode)

  cmsel , s , COMPN_PileCap
  nsel  , r , loc           , x , xVal
  nsel  , r , loc           , y , yVal
  nsel  , r , loc           , z , zVal
  cmsel , u , COMPN_pileNodePool
  capNode = nnear(pileNode)

  nsel,a,node,,pileNode
  cp , next , 'UX'   , capNode , pileNode
  cp , next , 'UY'   , capNode , pileNode
  cp , next , 'UZ'   , capNode , pileNode
  cp , next , 'ROTZ' , capNode , pileNode
  *if,FEM_PileTopConnection,eq,1,then
    cp , next , 'ROTX' , capNode , pileNode
    cp , next , 'ROTY' , capNode , pileNode
  *endif

*enddo

cmdele,COMPN_pileNodePool

! Connect abutment pile to abutment pile cap: couplings or contacts
*do,nthAbutment,1,2,1

  *if,GEO_ABT%nthAbutment%_type,eq,5,then

    *do,nthPile,1,GEO_ABT%nthAbutment%_pileCount
      ndName  = 'ND_ABT%nthAbutment%_PILE%nthPile%_pilot'
      cmaName = 'COMPA_ABT%nthAbutment%_PILE%nthPile%_itf'

      cmsel,s,COMPL_ABT%nthAbutment%_pile%nthPile%
      ksll,s
      cmsel,r,COMPK_ABT%nthAbutment%_pileTops
      nslk,s
      %ndName% = ndnext(0)

      n2acnt , %ndName% , cmaName
    *enddo

  *else

    cmsel,s,COMPK_ABT_pileTop
    cmsel,r,COMPK_ABT_%nthAbutment%
    nslk,s
    cm,COMPN_pileNodePool,node
    *get,nc,node,,count
    pileNode = 0

    *do,nthNode,1,nc,1
      cmsel,s,COMPN_pileNodePool

      pileNode = ndnext(pileNode)
      xVal     = nx(pileNode)
      yVal     = ny(pileNode)
      zVal     = nz(pileNode)

      cmsel,s,COMPN_ABT_pileCap
      cmsel,a,COMPN_ABT_tranWall
      nsel,r,loc,x,xVal
      nsel,r,loc,y,yVal
      nsel,r,loc,z,zVal
      cmsel,s,COMPL_ABT_pileConnections
      nsll,a,1
      cmsel,r,COMPN_ABT_%nthAbutment%
      cmsel,u,COMPN_pileNodePool
      capNode = nnear(pileNode)

      nsel,a,node,,pileNode
      cp , next , 'UX'   , capNode , pileNode
      cp , next , 'UY'   , capNode , pileNode
      cp , next , 'UZ'   , capNode , pileNode
      cp , next , 'ROTZ' , capNode , pileNode
      *if,FEM_PileTopConnection,eq,1,then
        cp , next , 'ROTX' , capNode , pileNode
        cp , next , 'ROTY' , capNode , pileNode
      *endif
    *enddo

  *endif
*enddo

! Pile curtain: connect piles to each other
*if,GEO_ABT1_type,eq,3,then
  cmsel,s,COMPL_ABT1_piles
  BRIDGE_V1_CURTAINCP
*endif
*if,GEO_ABT2_type,eq,3,then
  cmsel,s,COMPL_ABT2_piles
  BRIDGE_V1_CURTAINCP
*endif


!! 4.6.4 PILE ENVELOPING SOIL                                                                     !!
!!                                                                                                !!
! Initialize selection components
nsel,none
cm , COMPN_VSoil               , node
cm , COMPN_HSoil               , node
cm , COMPE_VSoil               , elem
cm , COMPE_HSoil               , elem
cm , COMPN_PIER_VSoil          , node
cm , COMPN_PIER_HSoil          , node
cm , COMPE_PIER_VSoil          , elem
cm , COMPE_PIER_HSoil          , elem
cm , COMPN_ABT1_VSoil          , node
cm , COMPN_ABT1_HSoil          , node
cm , COMPE_ABT1_VSoil          , elem
cm , COMPE_ABT1_HSoil          , elem
cm , COMPN_ABT2_VSoil          , node
cm , COMPN_ABT2_HSoil          , node
cm , COMPE_ABT2_VSoil          , elem
cm , COMPE_ABT2_HSoil          , elem
cm , COMPN_ABT1_pileFree       , node
cm , COMPN_ABT1_pileRestrained , node
cm , COMPN_ABT2_pileFree       , node
cm , COMPN_ABT2_pileRestrained , node
cm , COMPN_PILE_absentSoil     , node

! Create selection component with pile nodes that will not have soil envelopment
cmsel,s,COMPK_pileTop
cmsel,a,COMPK_ABT_pileTop
nslk,s
cm,COMPN_PILE_absentSoil,node

*if,MAT_SOIL_absentOpt,eq,1,then
  *do,nthSupport,1,GEO_supportCount,1
    topLevel = MAT_SOIL_absent_top(nthSupport)
    botLevel = MAT_SOIL_absent_bot(nthSupport)
    *if,botLevel,gt,topLevel,then
      cmsel,s,COMPL_SUP%nthSupport%_piles
      *get,lc,line,,count
      lnum = 0
      *do,nthLine,1,lc,1
        cmsel,s,COMPL_SUP%nthSupport%_piles
        lnum = lsnext(lnum)
        lsel,s,line,,lnum
        ksll,s
        *get,zRef,kp,,mxloc,z
        topZ = zRef-topLevel
        botZ = zRef-botLevel
        nsll,s,1
        nsel,r,loc,z,botZ,topZ
        cmpadd,'COMPN_PILE_absentSoil'
      *enddo
    *endif
  *enddo
*endif

! Pier piles
cmsel,s,COMPN_PIER_piles
cmsel,u,COMPN_PILE_absentSoil
cmsel,u,COMPN_rockSupport
cm,COMPN_base,node
*get,nc,node,,count
*if,nc,gt,0,then
  *if,MAT_Soil_kv,GT,0,THEN
    cmsel,s,COMPN_base
    sprsup,0,0,-FEM_springL,MAT_PileLat,SEC_VSOIL_num,TYPE_LINK180,'COMPN_PIER_VSoil','COMPE_PIER_VSoil',,3
  *endif
  *if,MAT_Soil_kh,GT,0,THEN
    cmsel,s,COMPN_base
    sprsup,-FEM_springL,0,0,MAT_Soil,SEC_HSOIL_num,TYPE_LINK180,'COMPN_PIER_HSoil','COMPE_PIER_HSoil',,4
    cmsel,s,COMPN_base
    sprsup,0,-FEM_springL,0,MAT_Soil,SEC_HSOIL_num,TYPE_LINK180,'COMPN_temp' ,'COMPE_temp',,4
    cmsel,s,COMPN_temp
    cmsel,s,COMPE_temp
    cmpadd,'COMPN_PIER_HSoil'
    cmpadd,'COMPE_PIER_HSoil'
  *endif
*endif

! First abutment
*if,GEO_ABT1_status,eq,1,then
  cmsel,s,COMPN_ABT1_piles
  *if,GEO_ABT1_pileFree,gt,0,then
    *get,zmx,node,,mxloc,z
    nsel,u,loc,z,zmx,zmx-GEO_ABT1_pileFree
    cm,COMPN_ABT1_pileRestrained,node
    cmsel,s,COMPN_ABT1_piles
    cmsel,u,COMPN_ABT1_pileRestrained
    cm,COMPN_ABT1_pileFree,node
  *else
    cm,COMPN_ABT1_pileRestrained,node
  *endif

  cmsel,s,COMPN_ABT1_pileRestrained
  cmsel,u,COMPN_PILE_absentSoil
  cmsel,u,COMPN_rockSupport
  cm,COMPN_ABT1_pileSpringSupported,node

  *get,nc,node,,count
  *if,nc,gt,0,then

    *if,MAT_Soil_kv,GT,0,THEN
      cmsel,s,COMPN_ABT1_pileSpringSupported
      sprsup,0,0,-FEM_springL,MAT_PileLat,SEC_VSOIL_num,TYPE_LINK180,'COMPN_ABT1_VSoil','COMPE_ABT1_VSoil',,3
    *endif
    *if,MAT_Soil_kh,GT,0,THEN
      *if,GEO_ABT1_type,eq,3,then
        ! Pile curtain: perpendicular soil supports only
        cmsel,s,COMPL_ABT_twPiles
        cmsel,a,COMPL_ABT_vxPiles
        nsll,s,1
        cmsel,r,COMPN_ABT1_pileSpringSupported
        sprsup , -FEM_springL , 0            , 0 , MAT_Soil , SEC_HSOIL_num , TYPE_LINK180 , 'COMPN_ABT1_HSoil' , 'COMPE_ABT1_HSoil' ,  , 4
        cmsel,s,COMPL_ABT_lwPiles
        cmsel,a,COMPL_ABT_vxPiles
        nsll,s,1
        cmsel,r,COMPN_ABT1_pileSpringSupported
        sprsup , 0            , -FEM_springL , 0 , MAT_Soil , SEC_HSOIL_num , TYPE_LINK180 , 'COMPN_temp'       , 'COMPE_temp'       ,  , 4
      *else
        cmsel,s,COMPN_ABT1_pileSpringSupported
        sprsup , -FEM_springL , 0            , 0 , MAT_Soil , SEC_HSOIL_num , TYPE_LINK180 , 'COMPN_ABT1_HSoil' , 'COMPE_ABT1_HSoil' ,  , 4
        cmsel,s,COMPN_ABT1_pileSpringSupported
        sprsup , 0            , -FEM_springL , 0 , MAT_Soil , SEC_HSOIL_num , TYPE_LINK180 , 'COMPN_temp'       , 'COMPE_temp'       ,  , 4
      *endif
      cmsel,s,COMPN_temp
      cmsel,s,COMPE_temp
      cmpadd,'COMPN_ABT1_HSoil'
      cmpadd,'COMPE_ABT1_HSoil'
    *endif

  *endif
  csys,0
*endif

! Second abutment
*if,GEO_ABT2_status,eq,1,then
  cmsel,s,COMPN_ABT2_piles
  *if,GEO_ABT2_pileFree,gt,0,then
    *get,zmx,node,,mxloc,z
    nsel,u,loc,z,zmx,zmx-GEO_ABT2_pileFree
    cm,COMPN_ABT2_pileRestrained,node
    cmsel,s,COMPN_ABT2_piles
    cmsel,u,COMPN_ABT2_pileRestrained
    cm,COMPN_ABT2_pileFree,node
  *else
    cm,COMPN_ABT2_pileRestrained,node
  *endif

  cmsel,s,COMPN_ABT2_pileRestrained
  cmsel,u,COMPN_PILE_absentSoil
  cmsel,u,COMPN_rockSupport
  cm,COMPN_ABT2_pileSpringSupported,node

  *get,nc,node,,count
  *if,nc,gt,0,then

    *if,MAT_Soil_kv,GT,0,THEN
      cmsel,s,COMPN_ABT2_pileSpringSupported
      sprsup,0,0,-FEM_springL,MAT_PileLat,SEC_VSOIL_num,TYPE_LINK180,'COMPN_ABT2_VSoil','COMPE_ABT2_VSoil',,3
    *endif
    *if,MAT_Soil_kh,GT,0,THEN
      *if,GEO_ABT2_type,eq,3,then
        ! Pile curtain: perpendicular soil supports only
        cmsel,s,COMPL_ABT_twPiles
        cmsel,a,COMPL_ABT_vxPiles
        nsll,s,1
        cmsel,r,COMPN_ABT2_pileSpringSupported
        sprsup , -FEM_springL , 0            , 0 , MAT_Soil , SEC_HSOIL_num , TYPE_LINK180 , 'COMPN_ABT2_HSoil' , 'COMPE_ABT2_HSoil' ,  , 4
        cmsel,s,COMPL_ABT_lwPiles
        cmsel,a,COMPL_ABT_vxPiles
        nsll,s,1
        cmsel,r,COMPN_ABT2_pileSpringSupported
        sprsup , 0            , -FEM_springL , 0 , MAT_Soil , SEC_HSOIL_num , TYPE_LINK180 , 'COMPN_temp'       , 'COMPE_temp'       ,  , 4
      *else
        cmsel,s,COMPN_ABT2_pileSpringSupported
        sprsup , -FEM_springL , 0            , 0 , MAT_Soil , SEC_HSOIL_num , TYPE_LINK180 , 'COMPN_ABT2_HSoil' , 'COMPE_ABT2_HSoil' ,  , 4
        cmsel,s,COMPN_ABT2_pileSpringSupported
        sprsup , 0            , -FEM_springL , 0 , MAT_Soil , SEC_HSOIL_num , TYPE_LINK180 , 'COMPN_temp'       , 'COMPE_temp'       ,  , 4
      *endif
      cmsel,s,COMPN_temp
      cmsel,s,COMPE_temp
      cmpadd,'COMPN_ABT2_HSoil'
      cmpadd,'COMPE_ABT2_HSoil'
    *endif

  *endif
  csys,0
*endif

! Selection components
cmsel,s,COMPN_PIER_VSoil
cmsel,a,COMPN_ABT1_VSoil
cmsel,a,COMPN_ABT2_VSoil
cm,COMPN_VSoil,node
cmsel,s,COMPN_PIER_HSoil
cmsel,a,COMPN_ABT1_HSoil
cmsel,a,COMPN_ABT2_HSoil
cm,COMPN_HSoil,node
cmsel,s,COMPE_PIER_VSoil
cmsel,a,COMPE_ABT1_VSoil
cmsel,a,COMPE_ABT2_VSoil
cm,COMPE_VSoil,elem
cmsel,s,COMPE_PIER_HSoil
cmsel,a,COMPE_ABT1_HSoil
cmsel,a,COMPE_ABT2_HSoil
cm,COMPE_HSoil,elem
cmsel,s,COMPE_HSoil
cmsel,a,COMPE_VSoil
cm,COMPE_Soil,elem
cmsel,s,COMPN_HSoil
cmsel,a,COMPN_VSoil
cm,COMPN_Soil,node

! Soil springs supports
cmsel,s,COMPN_HSoil
d,all,ux,0,,,,uy
cmsel,s,COMPN_VSoil
d,all,uz,0



!!                                                                                                !!
!! 4.7 GENERAL MESH                                                                               !!
!!                                                                                                !!
allsel

! Needed because of the approach used to apply loads, which requires continuous sequence of node numbers
! TODO  causes previously stored node numbers to become broken references (eg. FEM_bearing_pairs)
numcmp,node

! Create mesh components for post-processing
BRIDGE_V1_FEMCM

! Capture image of the mesh
allsel
view4w
wincln,1
wincln,2
wincln,3
wincln,4
lplot
/color,defa
/vup,all,z
/pnum,sec,1
/number,1
/eshape,1
eplot
takepic,'IMG01d_meshExtruded',,,,,POST_resultsFolder

! Turn off automatic screen updating
/nopr
immed,0
/uis,replot,0
/uis,msgpop,3
