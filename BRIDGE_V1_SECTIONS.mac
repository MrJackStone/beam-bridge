! BRIDGE_V1_SECTIONS


!! 2.1.3 CROSS-SECTIONS                                                                           !!
!!                                                                                                !!

!! 2.1.3.1 GIRDER                                                                                 !!
*if,GEO_uniGirderSection,eq,1,then
  *do,nthSection,2,GEO_girderSectionCount,1
    GIRDER_d   (nthSection)   = GIRDER_d   (1)
    GIRDER_bfs (nthSection)   = GIRDER_bfs (1)
    GIRDER_bfi (nthSection)   = GIRDER_bfi (1)
    GIRDER_tfs (nthSection)   = GIRDER_tfs (1)
    GIRDER_tfi (nthSection)   = GIRDER_tfi (1)
    GIRDER_tw  (nthSection)   = GIRDER_tw  (1)
    GIRDER_hs  (nthSection)   = GIRDER_hs  (1)
    GIRDER_hi  (nthSection)   = GIRDER_hi  (1)
    GIRDER_hw  (nthSection)   = GIRDER_hw  (1)
    GIRDER_name(1,nthSection) = GIRDER_name(1,1)
  *enddo
*endif

*do,nthGirderSection,1,GEO_girderSectionCount
  ! Collect section description
  num  = SEC_GIRDER_nums(nthGirderSection)
  bfs  = GIRDER_bfs(nthGirderSection)
  bfi  = GIRDER_bfi(nthGirderSection)
  d    = GIRDER_d(nthGirderSection)
  tfs  = GIRDER_tfs(nthGirderSection)
  tfi  = GIRDER_tfi(nthGirderSection)
  tw   = GIRDER_tw(nthGirderSection)
  hs   = GIRDER_hs(nthGirderSection)
  hi   = GIRDER_hi(nthGirderSection)
  hw   = GIRDER_hw(nthGirderSection)
  name = GIRDER_name(1,nthGirderSection)

  *if,MAT_Girder_type,EQ,0,THEN
    ! Write custom cross-section file
    SEC_GIRDER,bfs,bfi,d,tfs,tfi,tw,hs,hi,hw,name

    ! Update input geometry
    GIRDER_bfs(nthGirderSection) = SEC_GIRDER_VAR_bfs
    GIRDER_bfi(nthGirderSection) = SEC_GIRDER_VAR_bfi
    GIRDER_d  (nthGirderSection) = SEC_GIRDER_VAR_d
    GIRDER_tfs(nthGirderSection) = SEC_GIRDER_VAR_tfs
    GIRDER_tfi(nthGirderSection) = SEC_GIRDER_VAR_tfi
    GIRDER_tw (nthGirderSection) = SEC_GIRDER_VAR_tw
    GIRDER_hs (nthGirderSection) = SEC_GIRDER_VAR_hs
    GIRDER_hi (nthGirderSection) = SEC_GIRDER_VAR_hi
    GIRDER_hw (nthGirderSection) = SEC_GIRDER_VAR_hw

    ! Create cross-section
    sectype,num,beam,mesh,name
    secread,name,sect,,mesh
    secoffset,user,bfi/2,d

  *elseif,MAT_Girder_type,EQ,1,THEN
    ! Create section from database
    CEDISAVS,num,name,2

    ! Update input geometry
    GIRDER_bfs(nthGirderSection) = CEDISAVS_VAR_bf
    GIRDER_bfi(nthGirderSection) = CEDISAVS_VAR_bf
    GIRDER_d  (nthGirderSection) = CEDISAVS_VAR_d
    GIRDER_tfs(nthGirderSection) = CEDISAVS_VAR_tf
    GIRDER_tfi(nthGirderSection) = CEDISAVS_VAR_tf
    GIRDER_tw (nthGirderSection) = CEDISAVS_VAR_tw
    GIRDER_hs (nthGirderSection) = 0
    GIRDER_hi (nthGirderSection) = 0
    GIRDER_hw (nthGirderSection) = CEDISAVS_VAR_d-2*CEDISAVS_VAR_tf

    secoffset,user,,GIRDER_d(nthGirderSection)

  *endif

  *del , num  ,, nopr
  *del , bfs  ,, nopr
  *del , bfi  ,, nopr
  *del , d    ,, nopr
  *del , tfs  ,, nopr
  *del , tfi  ,, nopr
  *del , tw   ,, nopr
  *del , hs   ,, nopr
  *del , hi   ,, nopr
  *del , hw   ,, nopr
  *del , name ,, nopr
*enddo

!! 2.1.3.2 SLAB                                                                                   !!
sectype,SEC_SLAB_num,SHELL,,SLAB_name
secdata,SLAB_t,MAT_Slab
secoffset,user,-(SLAB_t/2)-SLAB_hF

!! 2.1.3.3 CANTILEVER (GERBER CONNECTION)                                                         !!
sectype,SEC_GERBER,beam,rect,'GERBER',2
secdata,GERBER_b,GERBER_h
*if,SEC_offset,eq,1,then
   secoffset,user,,GERBER_h/2
*endif

!! 2.1.3.4 CONSOLE (GERBER CONNECTION)                                                            !!
sectype,SEC_CONSOLE,beam,rect,'CONSOLE',2
secdata,CONSOLE_b,CONSOLE_h
*if,SEC_offset,eq,1,then
   secoffset,user,,CONSOLE_h/2
*endif

!! 2.1.3.5 COLUMNS                                                                                !!
SECTYPE,SEC_COLUMN_num,BEAM,RECT,COLUMN_name,2
SECDATA,COLUMN_cx,COLUMN_cy

!! 2.1.3.6 FRAME GIRDER                                                                           !!
sectype,SEC_FRAMEGIRDER_num,BEAM,RECT,FRAMEGIRDER_name,2
secdata,FRAMEGIRDER_b,FRAMEGIRDER_h
secoffset,USER,,FRAMEGIRDER_h/2

!! 2.1.3.7 Cross beam                                                                             !!
sectype,SEC_CROSSBEAM,beam,rect,'CRSBEAM',2
secdata,CROSSBEAM_b,CROSSBEAM_h
secoffset,user,,CROSSBEAM_h/2

!! 2.1.3.7 PILE CAPS                                                                              !!
SECTYPE,SEC_PILECAP_num,SHELL,,PILECAP_name
SECDATA,PILECAP_h,MAT_PileCap
*if,SEC_offset,EQ,1,THEN
  SECOFFSET,TOP
*endif

!! 2.1.3.8 GRADE BEAM                                                                             !!
SECTYPE,SEC_GRADEBEAM_num,BEAM,RECT,GRADEBEAM_name,2
SECDATA,GRADEBEAM_b,GRADEBEAM_h
*if,SEC_offset,EQ,1,THEN
   SECOFFSET,USER,,GRADEBEAM_h/2
*endif

!! 2.1.3.9 PILES                                                                                  !!
*if,PILE_thk,eq,0,then
  ! Standard concrete pile
  SECTYPE,SEC_PILE_num,BEAM,CSOLID,PILE_name,2
  SECDATA,PILE_d/2
*elseif,PILE_thk,gt,0,then
  ! Concrete pile with permanent steel casing
  sec_ctube , PILE_d , PILE_thk , MAT_pile , MAT_casing ,, 'COMPOSITE_PILE'
  sectype,SEC_PILE_num,beam,mesh,'PILE'
  secread,'COMPOSITE_PILE',sect,,mesh
*endif
!! 2.1.3.18 ABUTMENTS                                                                             !!

! LONGITUDINAL WALLS
sectype,SEC_ABT_longWall,shell,,'ABT_LW'
secdata,SEC_ABT_longWall_t,MAT_Abutment

! TRANSVERSAL WALL (thick)
sectype,SEC_ABT_tranWall,shell,,'ABT_TW'
secdata,SEC_ABT_tranWall_t,MAT_Abutment

! TRANSVERSAL WALL (thin)
sectype,SEC_ABT_thinTranWall,shell,,'ABT_TTW'
secdata,SEC_ABT_thinTranWall_t,MAT_Abutment

! BEAM
sectype,SEC_ABT_beam,shell,,'ABT_BEAM'
secdata,SEC_ABT_beam_W,MAT_Abutment

! COLUMNS
sectype,SEC_ABT_column,shell,,'ABT_COL'
secdata,SEC_ABT_col_W,MAT_Abutment

! WINGS
sectype,SEC_ABT_wing,shell,,'ABT_WING'
secdata,SEC_ABT_wing_t,MAT_Abutment

! APPROACH SLAB
sectype,SEC_ABT_appSlab,shell,,'ABT_SLAB'
secdata,SEC_ABT_appSlab_t,MAT_Approach
secoffset,bot

! PILES
*if,SEC_ABT_PILE_thk,eq,0,then
  ! Standard concrete pile
  sectype,SEC_ABT_pile,beam,csolid,'ABT_PILE',2
  secdata,SEC_ABT_pile_d/2
*elseif,SEC_ABT_PILE_thk,gt,0,then
  ! Concrete pile with permanent steel casing
  sec_ctube , SEC_ABT_PILE_d , SEC_ABT_PILE_thk , MAT_pile , MAT_casing ,, 'COMPOSITE_ABT_PILE'
  sectype,SEC_ABT_pile,beam,mesh,'ABTPILE'
  secread,'COMPOSITE_ABT_PILE',sect,,mesh
*endif

! PILE CAP
sectype,SEC_ABT_pileCap,shell,,'ABT_SLAB'
secdata,SEC_ABT_pileCap_h,MAT_Abutment
secoffset,top

!! 2.1.3.19 TUBULAR COLUMN WALLS                                                                  !!
SECTYPE,SEC_COLWALL,SHELL,,'COLWALL'
SECDATA,COLUMN_tWall,MAT_Column
!
!! 2.1.3.20 TUBULAR COLUMN CAP                                                                    !!
SECTYPE,SEC_COLCAP,SHELL,,'COLCAP'
SECDATA,COLUMN_tCap,MAT_Column
secoffset,top
