! BRIDGE_V1_LSLIVE


SEARCH_TOL=0.5

! Write load steps
*do,nthTransvPos,1,LOAD_ltTransScenarioCount,1

  *do,nthPos,1,posCount,1

    targetSpan=LOAD_lt_span(nthPos)
    *if,targetSpan,eq,0,then
      allsel
    *elseif,targetSpan,eq,-1,then
      cmsel,s,COMPN_ABT_appSlab
      cmsel,r,COMPN_ABT_1
    *elseif,targetSpan,eq,-2,then
      cmsel,s,COMPN_ABT_appSlab
      cmsel,r,COMPN_ABT_2
    *else
      cmsel,s,COMPN_SLAB_%targetSpan%
    *endif
    cm,COMPN_preferredSpan,node
    allsel

    *do,nthDir,1,2,1

      *if,nthDir,eq,1,then
        horDir_fct=1
      *elseif,nthDir,eq,2,then
        horDir_fct=-1
      *endif

      ! Initialize load step
      allsel
      lsclear,all
      sfcum,all,repl
      fcum,repl
      lsread,1
      sfcum,all,add
      fcum,add

      *del , LOAD_x              ,  , nopr
      *del , LOAD_in             ,  , nopr
      *del , LOAD_notOut         ,  , nopr
      *del , LOAD_true           ,  , nopr
      *del , LOAD_vert           ,  , nopr
      *del , LOAD_pos            ,  , nopr
      *del , span_before         ,  , nopr
      *del , span_after          ,  , nopr
      *del , ahead               ,  , nopr
      *del , behind              ,  , nopr
      *del , loaded_spans        ,  , nopr
      *del , LOAD_long           ,  , nopr
      *del , loaded_longitudinal ,  , nopr
      *del , loaded_lengths      ,  , nopr
      *del , LOAD_long           ,  , nopr

      ! Get X position of leading load
      xLead=LTleadingPos(nthPos)

      ! Calculate X coordinates of each point load
      *dim   , LOAD_x ,       , LOAD_plCount
      *voper , LOAD_x , xLead , sub          , LOAD_plDist

      ! Determine which point loads are on the bridge (including abutments)
      *voper  , LOAD_in     , LOAD_x  , ge        , GEO_ABT1_xMin
      *voper  , LOAD_notOut , LOAD_x  , le        , GEO_ABT2_xmax
      *voper  , LOAD_true   , LOAD_in , mult      , LOAD_notOut
      *vscfun , LOAD_count  , sum     , LOAD_true

      *if,LOAD_count,eq,0,then
        ! No point loads over bridge + abutments
        esel,u,elem,,all
        cm,COMPE_loaded,elem
        cm,COMPE_LTshadow,elem

        ! Apply static live loads
        BRIDGE_V1_LIVELOADS

      *else

        ! Compress load-train arrays: keep only point loads on the bridge
        *vmask , LOAD_true
        *vfun  , LOAD_vert , comp , LOAD_plValue
        *vmask , LOAD_true
        *vfun  , LOAD_pos  , comp , LOAD_x

        ! Determine loaded spans
        *vscfun , LOAD_xMin    , min       , LOAD_pos
        *vscfun , LOAD_xMax    , max       , LOAD_pos
        *voper  , span_before  , LOAD_xMin , lt               , GEO_genSpanLimits
        *voper  , span_after   , LOAD_xMax , gt               , GEO_genSpanLimits
        *dim    , ahead        ,           , GEO_genSpanCount
        *dim    , behind       ,           , GEO_genSpanCount
        *vfun   , ahead(1)     , copy      , span_after(1)
        *vfun   , behind(1)    , copy      , span_before(2)
        *voper  , loaded_spans , ahead     , mult             , behind
        esel,none
        *do,nthSpan,1,GEO_genSpanCount,1
          loaded_check=loaded_spans(nthSpan)
          *if,loaded_check,eq,1,then
            x_i=GEO_genSpanLimits(nthSpan)
            x_j=GEO_genSpanLimits(nthSpan+1)
            esel,a,cent,x,x_i,x_j
          *endif
        *enddo
        cm,COMPE_loaded,elem

        ! Calculate area occupied by load-train, to which uniform traffic load will not be applied
        nsel,u,node,,all
        cm,COMPN_LTshadow,node
        *vscfun,x_min,min,LOAD_pos
        *vscfun,x_max,max,LOAD_pos
        x_min=x_min-LOAD_ltGapLength
        x_max=x_max+LOAD_ltGapLength
        x_center=(x_min+x_max)/2
        *if,GEO_deckRadius,eq,0,then
          ! Tangent deck:
          *do,nthLT,1,LOAD_ltCount,1
            *afun,deg
            ySkewOffset=tan(LOAD_ltSkewness)*x_center
            *afun,rad
            y_min = ySkewOffset+LOAD_ltWheelOff_beg(nthLT*2-1,nthTransvPos)-LOAD_ltGapWidth
            y_max = ySkewOffset+LOAD_ltWheelOff_beg(nthLT*2,nthTransvPos)+LOAD_ltGapWidth
            nsel,s,loc,y,y_min,y_max
            nsel,r,loc,x,x_min,x_max
            cmsel,r,COMPN_occupied
            cmpadd,'COMPN_LTshadow'
          *enddo
        *else
          ! Curved deck:
          csys,CS_deck
          BRIDGE_V1_XTOCHI,'chi_min',x_min
          BRIDGE_V1_XTOCHI,'chi_max',x_max
          *do,nthLT,1,LOAD_ltCount,1
            y_min=LOAD_ltWheelOff(nthLT*2-1)
            y_max=LOAD_ltWheelOff(nthLT*2)
            nsel,s,loc,x,GEO_deckRadius+y_min,GEO_deckRadius+y_max
            nsel,r,loc,y,180-chi_min,180-chi_max
            cmsel,r,COMPN_occupied
            cmpadd,'COMPN_LTshadow'
          *enddo
          csys,0
        *endif
        cmsel,s,COMPN_LTshadow
        esln,s,0
        cmsel,r,COMPE_occupied
        cm,COMPE_LTshadow,elem

        ! Calculate longitudinal braking/accelerating forces
        *if,BRIDGE_type,eq,0,then
          ! Highway bridge:

          *voper,LOAD_long,LOAD_vert,mult,1/3

        *elseif,BRIDGE_type,eq,1,then
          ! Railway bridge:

          *if,LOAD_railOpt,eq,0,then
            ! Discontinuous rail
            *voper,loaded_longitudinal,arr_f_longitudinal,mult,loaded_spans
            *vscfun,f_longitudinal,sum,loaded_longitudinal
          *elseif,LOAD_railOpt,eq,1,then
            ! Continuous rail
            *voper,loaded_lengths,GEO_genSpanLengths,mult,loaded_spans
            *vscfun,loaded_length,sum,loaded_lengths
            f_braking=200+17.5*loaded_length
            f_accelerating=200*sqrt(loaded_length)
            f_longitudinal=(f_braking>f_accelerating)
          *endif
          f_longitudinal=f_longitudinal*1e3
          *vscfun,Fvert_total,sum,LOAD_vert
          vl_ratio=f_longitudinal/Fvert_total
          long_fact=(vl_ratio<0.25)
          *voper,LOAD_long,LOAD_vert,mult,long_fact

        *endif

        ! Apply static live loads
        BRIDGE_V1_LIVELOADS

        ! Apply moving live loads
        BRIDGE_V1_LIVEMOVING

      *endif

      ! Write load step
      nthLoadStep=nthLoadStep+1
      ALLSEL
      ANTYPE,0
      OUTRES,ERASE
      OUTRES,ALL,last
      LSWRITE,nthLoadStep

    *enddo

  *enddo

*enddo

LoadStepCount=nthLoadStep
